[{"content":"Project name: Croddy\nNest Camera Guide: https://developers.google.com/nest/device-access/get-started Register Device Access Accept $5 one time fee https://console.nest.google.com/device-access/ Activate Supported Device Activate and setup device with non-commercial google account Setup Google Cloud Platform Use the link on top of the article, scroll down to Setup Google Cloud Platform and click on Enable the API and Get an OAuth 2.0 Client ID Select Webserver \u0026gt; Enter https://www.google.com \u0026gt; copy Client ID and download the file Create a Device Access project Go to Device Access \u0026gt; Create new project \u0026gt; paste Client ID \u0026gt; disable event Once done, copy Project ID down Now you have to link your developer account with user account\nLink your account PCM - Get Authorization Code https://nestservices.google.com/partnerconnections/project-id/auth?redirect_uri=https://www.google.com\u0026amp;access_type=offline\u0026amp;prompt=consent\u0026amp;client_id=oauth2-client-id\u0026amp;response_type=code\u0026amp;scope=https://www.googleapis.com/auth/sdm.service Go to Google Cloud Platform \u0026gt; OAuth consent screen \u0026gt; Under Test User \u0026gt; add yourself in replace project-id (from Device Access Project ID) replace oath2-client-id with OAuthClient ID from Google Cloud Crendetial Copy and paste to google Allow and follow next Once done, it will go to www.google.com, copy the URL The Authorization code is in the URL: https://www.google.com/?code=4/0AfJohXlvngYWOp06a-e68hfU7jEOyrMeUyPlA2AVfs-og4i172VeEBzLLgP7UsiWxGkXrA\u0026amp;scope=https://www.googleapis.com/auth/sdm.service the code start after code= and end \u0026amp;scope Get Access Token Open terminal, replace oauth2-client-id with the OAuth2 Client ID from your Google Cloud Credentials oauth2-client-secret with Client Secret from your Google Cloud Credentials authorization-code with the code you received in the previous stepvariable and run curl -L -X POST \u0026#39;https://www.googleapis.com/oauth2/v4/token?client_id=oauth2-client-id\u0026amp;client_secret=oauth2-client-secret\u0026amp;code=authorization-code\u0026amp;grant_type=authorization_code\u0026amp;redirect_uri=https://www.google.com\u0026#39; if it give you error, run Remove-item alias:curl if it gives you Error 411 (Length Required), add this to the end of your curl -H \u0026#39;Content-Length: 0\u0026#39; it should return 2 tokens: access token and refresh token { \u0026#34;access_token\u0026#34;: \u0026#34;access-token\u0026#34;, \u0026#34;expires_in\u0026#34;: 3599, \u0026#34;refresh_token\u0026#34;: \u0026#34;refresh-token\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;https://www.googleapis.com/auth/sdm.service\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34; } Make a device list call IMPORTANT: This call is required to complete the authorization, with out this call, the authorization project will not appear in PCM and events will not be published curl -X GET \u0026#39;https://smartdevicemanagement.googleapis.com/v1/enterprises/project-id/devices\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer access-token\u0026#39; Replace project-id with Project ID find in Deviec Access console Replace access-token with Access Token from step 6 remove space and \\ to make the curl into one line copy and paste into terminal result { \u0026#34;devices\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;enterprises/project-id/devices/device-id\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;sdm.devices.types.device-type\u0026#34;, \u0026#34;traits\u0026#34;: { ... }, \u0026#34;parentRelations\u0026#34;: [ { \u0026#34;parent\u0026#34;: \u0026#34;enterprises/project-id/structures/structure-id/rooms/room-id\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;device-room-name\u0026#34; } ] } ] } ","permalink":"http://www.nvo.one/posts/005-google-sdm/","summary":"Project name: Croddy\nNest Camera Guide: https://developers.google.com/nest/device-access/get-started Register Device Access Accept $5 one time fee https://console.nest.google.com/device-access/ Activate Supported Device Activate and setup device with non-commercial google account Setup Google Cloud Platform Use the link on top of the article, scroll down to Setup Google Cloud Platform and click on Enable the API and Get an OAuth 2.0 Client ID Select Webserver \u0026gt; Enter https://www.google.com \u0026gt; copy Client ID and download the file Create a Device Access project Go to Device Access \u0026gt; Create new project \u0026gt; paste Client ID \u0026gt; disable event Once done, copy Project ID down Now you have to link your developer account with user account","title":"Using Google SDM API to control Google Nest Camera"},{"content":"1. Source Code https://github.com/nhatvo1502/Automate-IaC/tree/main 2. What the code does 2.1. create-resource.yml configure aws credential verify aws credential verify aws s3 permission create s3 bucket for terraform backend copy file from GH to runner verify terraform file terraform init -\u0026gt; apply 2.2 destroy-resource.yml configure aws credential copy file from GH to runner verify terraform file terraform init -\u0026gt; destroy empty s3 backend bucket delete-bucket 2.3 main.tf configure s3 as backend create an s3 bucket create a keypair using a public key from GitHub Secret AMI lookup create VPC create a subnet create a network interface create EC2 instance 3. Setup 3.1 GH clone and repo set You will need to clone my code\ngh repo clone https://github.com/nhatvo1502/Automate-IaC/tree/main When you clone a reposityory, it added as a remote of yours, under the name origin. What you need to do now (as you\u0026rsquo;re not using the my source anymore) is to rename origin to upstream and add your own origin URL:\ngit remote rename origin upstream git remote add origin http://github.com/YOU/YOUR_REPO Whenever you want to changes from my branch (which is your upstream)\ngit fetch upstream Whenever you want to commit and push to your repository\ngit add *.* git commit -m \u0026#39;YOUR_MESSAGE\u0026#39; git push 3.2 Github Secrets Create AWS CLI user with Admin Permission https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html Create GitHub Secrets https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-development-environment-secrets-for-your-repository-or-organization Login to your Github Account \u0026gt; Go to your project Repository \u0026gt; Settings \u0026gt; Under Secrets and variables \u0026gt; Select Actions \u0026gt; Create an environment \u0026ldquo;Dev\u0026rdquo; \u0026gt; Create AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY 4. Github Actions 5. GitHub Action runner results: 5.1 Terraform apply Run terraform apply -auto-approve data.aws_ami.ubuntu: Reading... data.aws_ami.ubuntu: Read complete after 0s [id=ami-027a754129abb5386] Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # aws_instance.new_instance will be created + resource \u0026#34;aws_instance\u0026#34; \u0026#34;new_instance\u0026#34; { + ami = \u0026#34;ami-027a754129abb5386\u0026#34; + arn = (known after apply) + associate_public_ip_address = (known after apply) + availability_zone = (known after apply) + cpu_core_count = (known after apply) + cpu_threads_per_core = (known after apply) + disable_api_stop = (known after apply) + disable_api_termination = (known after apply) + ebs_optimized = (known after apply) + get_password_data = false + host_id = (known after apply) + host_resource_group_arn = (known after apply) + iam_instance_profile = (known after apply) + id = (known after apply) + instance_initiated_shutdown_behavior = (known after apply) + instance_lifecycle = (known after apply) + instance_state = (known after apply) + instance_type = \u0026#34;t3.micro\u0026#34; + ipv6_address_count = (known after apply) + ipv6_addresses = (known after apply) + key_name = \u0026#34;automate-iac-kp\u0026#34; + monitoring = (known after apply) + outpost_arn = (known after apply) + password_data = (known after apply) + placement_group = (known after apply) + placement_partition_number = (known after apply) + primary_network_interface_id = (known after apply) + private_dns = (known after apply) + private_ip = (known after apply) + public_dns = (known after apply) + public_ip = (known after apply) + secondary_private_ips = (known after apply) + security_groups = (known after apply) + spot_instance_request_id = (known after apply) + subnet_id = (known after apply) + tags = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tags_all = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tenancy = (known after apply) + user_data = (known after apply) + user_data_base64 = (known after apply) + user_data_replace_on_change = false + vpc_security_group_ids = (known after apply) + network_interface { + delete_on_termination = false + device_index = 0 + network_card_index = 0 + network_interface_id = (known after apply) } } # aws_key_pair.new_keypair will be created + resource \u0026#34;aws_key_pair\u0026#34; \u0026#34;new_keypair\u0026#34; { + arn = (known after apply) + fingerprint = (known after apply) + id = (known after apply) + key_name = \u0026#34;automate-iac-kp\u0026#34; + key_name_prefix = (known after apply) + key_pair_id = (known after apply) + key_type = (known after apply) + public_key = \u0026#34;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJgKe/Ko/3pXldymY2/bwP70xPJzP6NpKS9iQP450sWFtc5VuG3fqaOvGMzhrS3VUseALddYALiWmgf+cgjdvASeW3eIl54y2253QTme4eb1WOZ2/MvcANBuiJFqItL7SR4xlaAuI48yS8lh7L2OIIpzy8PUV+EcPD9KGKsAicFwIDAQAB\u0026#34; + tags = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tags_all = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } } # aws_network_interface.automate-iac-aws_network_interface will be created + resource \u0026#34;aws_network_interface\u0026#34; \u0026#34;automate-iac-aws_network_interface\u0026#34; { + arn = (known after apply) + id = (known after apply) + interface_type = (known after apply) + ipv4_prefix_count = (known after apply) + ipv4_prefixes = (known after apply) + ipv6_address_count = (known after apply) + ipv6_address_list = (known after apply) + ipv6_address_list_enabled = false + ipv6_addresses = (known after apply) + ipv6_prefix_count = (known after apply) + ipv6_prefixes = (known after apply) + mac_address = (known after apply) + outpost_arn = (known after apply) + owner_id = (known after apply) + private_dns_name = (known after apply) + private_ip = (known after apply) + private_ip_list = (known after apply) + private_ip_list_enabled = false + private_ips = (known after apply) + private_ips_count = (known after apply) + security_groups = (known after apply) + source_dest_check = true + subnet_id = (known after apply) + tags = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tags_all = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } } # aws_s3_bucket.new_bucket will be created + resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;new_bucket\u0026#34; { + acceleration_status = (known after apply) + acl = (known after apply) + arn = (known after apply) + bucket = \u0026#34;automate-iac-bucket-123123123\u0026#34; + bucket_domain_name = (known after apply) + bucket_prefix = (known after apply) + bucket_regional_domain_name = (known after apply) + force_destroy = false + hosted_zone_id = (known after apply) + id = (known after apply) + object_lock_enabled = (known after apply) + policy = (known after apply) + region = (known after apply) + request_payer = (known after apply) + tags_all = (known after apply) + website_domain = (known after apply) + website_endpoint = (known after apply) } # aws_subnet.automate-iac-subnet will be created + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;automate-iac-subnet\u0026#34; { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \u0026#34;us-east-1a\u0026#34; + availability_zone_id = (known after apply) + cidr_block = \u0026#34;172.16.10.0/24\u0026#34; + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = false + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tags_all = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + vpc_id = (known after apply) } # aws_vpc.automate-iac-vpc will be created + resource \u0026#34;aws_vpc\u0026#34; \u0026#34;automate-iac-vpc\u0026#34; { + arn = (known after apply) + cidr_block = \u0026#34;172.16.0.0/16\u0026#34; + default_network_acl_id = (known after apply) + default_route_table_id = (known after apply) + default_security_group_id = (known after apply) + dhcp_options_id = (known after apply) + enable_dns_hostnames = (known after apply) + enable_dns_support = true + enable_network_address_usage_metrics = (known after apply) + id = (known after apply) + instance_tenancy = \u0026#34;default\u0026#34; + ipv6_association_id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_network_border_group = (known after apply) + main_route_table_id = (known after apply) + owner_id = (known after apply) + tags = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } + tags_all = { + \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } } Plan: 6 to add, 0 to change, 0 to destroy. aws_key_pair.new_keypair: Creating... aws_vpc.automate-iac-vpc: Creating... aws_s3_bucket.new_bucket: Creating... aws_key_pair.new_keypair: Creation complete after 0s [id=automate-iac-kp] aws_vpc.automate-iac-vpc: Creation complete after 1s [id=vpc-02606838ac1e89cea] aws_subnet.automate-iac-subnet: Creating... aws_subnet.automate-iac-subnet: Creation complete after 1s [id=subnet-0dbfc00f69e201fa7] aws_network_interface.automate-iac-aws_network_interface: Creating... aws_network_interface.automate-iac-aws_network_interface: Creation complete after 0s [id=eni-0673ed65d965c194e] aws_instance.new_instance: Creating... aws_s3_bucket.new_bucket: Still creating... [10s elapsed] aws_instance.new_instance: Still creating... [10s elapsed] aws_instance.new_instance: Creation complete after 13s [id=i-08a28371557209b0b] aws_s3_bucket.new_bucket: Creation complete after 16s [id=automate-iac-bucket-123123123] Apply complete! Resources: 6 added, 0 changed, 0 destroyed. 5.2 Terraform destroy Run terraform destroy -auto-approve data.aws_ami.ubuntu: Reading... aws_vpc.automate-iac-vpc: Refreshing state... [id=vpc-02606838ac1e89cea] aws_key_pair.new_keypair: Refreshing state... [id=automate-iac-kp] aws_s3_bucket.new_bucket: Refreshing state... [id=automate-iac-bucket-123123123] data.aws_ami.ubuntu: Read complete after 0s [id=ami-027a754129abb5386] aws_subnet.automate-iac-subnet: Refreshing state... [id=subnet-0dbfc00f69e201fa7] aws_network_interface.automate-iac-aws_network_interface: Refreshing state... [id=eni-0673ed65d965c194e] aws_instance.new_instance: Refreshing state... [id=i-08a28371557209b0b] Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # aws_instance.new_instance will be destroyed - resource \u0026#34;aws_instance\u0026#34; \u0026#34;new_instance\u0026#34; { - ami = \u0026#34;ami-027a754129abb5386\u0026#34; -\u0026gt; null - arn = \u0026#34;arn:aws:ec2:us-east-1:566027688242:instance/i-08a28371557209b0b\u0026#34; -\u0026gt; null - associate_public_ip_address = false -\u0026gt; null - availability_zone = \u0026#34;us-east-1a\u0026#34; -\u0026gt; null - cpu_core_count = 1 -\u0026gt; null - cpu_threads_per_core = 2 -\u0026gt; null - disable_api_stop = false -\u0026gt; null - disable_api_termination = false -\u0026gt; null - ebs_optimized = false -\u0026gt; null - get_password_data = false -\u0026gt; null - hibernation = false -\u0026gt; null - id = \u0026#34;i-08a28371557209b0b\u0026#34; -\u0026gt; null - instance_initiated_shutdown_behavior = \u0026#34;stop\u0026#34; -\u0026gt; null - instance_state = \u0026#34;running\u0026#34; -\u0026gt; null - instance_type = \u0026#34;t3.micro\u0026#34; -\u0026gt; null - ipv6_address_count = 0 -\u0026gt; null - ipv6_addresses = [] -\u0026gt; null - key_name = \u0026#34;automate-iac-kp\u0026#34; -\u0026gt; null - monitoring = false -\u0026gt; null - placement_partition_number = 0 -\u0026gt; null - primary_network_interface_id = \u0026#34;eni-0673ed65d965c194e\u0026#34; -\u0026gt; null - private_dns = \u0026#34;ip-172-16-10-100.ec2.internal\u0026#34; -\u0026gt; null - private_ip = \u0026#34;172.16.10.100\u0026#34; -\u0026gt; null - secondary_private_ips = [] -\u0026gt; null - security_groups = [] -\u0026gt; null - source_dest_check = true -\u0026gt; null - subnet_id = \u0026#34;subnet-0dbfc00f69e201fa7\u0026#34; -\u0026gt; null - tags = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tags_all = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tenancy = \u0026#34;default\u0026#34; -\u0026gt; null - user_data_replace_on_change = false -\u0026gt; null - vpc_security_group_ids = [ - \u0026#34;sg-0ce04508e0520a5f7\u0026#34;, ] -\u0026gt; null - capacity_reservation_specification { - capacity_reservation_preference = \u0026#34;open\u0026#34; -\u0026gt; null } - cpu_options { - core_count = 1 -\u0026gt; null - threads_per_core = 2 -\u0026gt; null } - credit_specification { - cpu_credits = \u0026#34;unlimited\u0026#34; -\u0026gt; null } - enclave_options { - enabled = false -\u0026gt; null } - maintenance_options { - auto_recovery = \u0026#34;default\u0026#34; -\u0026gt; null } - metadata_options { - http_endpoint = \u0026#34;enabled\u0026#34; -\u0026gt; null - http_protocol_ipv6 = \u0026#34;disabled\u0026#34; -\u0026gt; null - http_put_response_hop_limit = 1 -\u0026gt; null - http_tokens = \u0026#34;optional\u0026#34; -\u0026gt; null - instance_metadata_tags = \u0026#34;disabled\u0026#34; -\u0026gt; null } - network_interface { - delete_on_termination = false -\u0026gt; null - device_index = 0 -\u0026gt; null - network_card_index = 0 -\u0026gt; null - network_interface_id = \u0026#34;eni-0673ed65d965c194e\u0026#34; -\u0026gt; null } - private_dns_name_options { - enable_resource_name_dns_a_record = false -\u0026gt; null - enable_resource_name_dns_aaaa_record = false -\u0026gt; null - hostname_type = \u0026#34;ip-name\u0026#34; -\u0026gt; null } - root_block_device { - delete_on_termination = true -\u0026gt; null - device_name = \u0026#34;/dev/sda1\u0026#34; -\u0026gt; null - encrypted = false -\u0026gt; null - iops = 100 -\u0026gt; null - tags = {} -\u0026gt; null - throughput = 0 -\u0026gt; null - volume_id = \u0026#34;vol-0a8b14289eb677afa\u0026#34; -\u0026gt; null - volume_size = 8 -\u0026gt; null - volume_type = \u0026#34;gp2\u0026#34; -\u0026gt; null } } # aws_key_pair.new_keypair will be destroyed - resource \u0026#34;aws_key_pair\u0026#34; \u0026#34;new_keypair\u0026#34; { - arn = \u0026#34;arn:aws:ec2:us-east-1:566027688242:key-pair/automate-iac-kp\u0026#34; -\u0026gt; null - fingerprint = \u0026#34;6f:9d:e0:9f:e1:05:17:47:8c:e0:65:ca:dd:6b:7b:1e\u0026#34; -\u0026gt; null - id = \u0026#34;automate-iac-kp\u0026#34; -\u0026gt; null - key_name = \u0026#34;automate-iac-kp\u0026#34; -\u0026gt; null - key_pair_id = \u0026#34;key-0114ec655b0b831e7\u0026#34; -\u0026gt; null - key_type = \u0026#34;rsa\u0026#34; -\u0026gt; null - public_key = \u0026#34;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJgKe/Ko/3pXldymY2/bwP70xPJzP6NpKS9iQP450sWFtc5VuG3fqaOvGMzhrS3VUseALddYALiWmgf+cgjdvASeW3eIl54y2253QTme4eb1WOZ2/MvcANBuiJFqItL7SR4xlaAuI48yS8lh7L2OIIpzy8PUV+EcPD9KGKsAicFwIDAQAB\u0026#34; -\u0026gt; null - tags = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tags_all = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null } # aws_network_interface.automate-iac-aws_network_interface will be destroyed - resource \u0026#34;aws_network_interface\u0026#34; \u0026#34;automate-iac-aws_network_interface\u0026#34; { - arn = \u0026#34;arn:aws:ec2:us-east-1:566027688242:network-interface/eni-0673ed65d965c194e\u0026#34; -\u0026gt; null - id = \u0026#34;eni-0673ed65d965c194e\u0026#34; -\u0026gt; null - interface_type = \u0026#34;interface\u0026#34; -\u0026gt; null - ipv4_prefix_count = 0 -\u0026gt; null - ipv4_prefixes = [] -\u0026gt; null - ipv6_address_count = 0 -\u0026gt; null - ipv6_address_list = [] -\u0026gt; null - ipv6_address_list_enabled = false -\u0026gt; null - ipv6_addresses = [] -\u0026gt; null - ipv6_prefix_count = 0 -\u0026gt; null - ipv6_prefixes = [] -\u0026gt; null - mac_address = \u0026#34;02:27:2b:64:3d:c3\u0026#34; -\u0026gt; null - owner_id = \u0026#34;566027688242\u0026#34; -\u0026gt; null - private_ip = \u0026#34;172.16.10.100\u0026#34; -\u0026gt; null - private_ip_list = [ - \u0026#34;172.16.10.100\u0026#34;, ] -\u0026gt; null - private_ip_list_enabled = false -\u0026gt; null - private_ips = [ - \u0026#34;172.16.10.100\u0026#34;, ] -\u0026gt; null - private_ips_count = 0 -\u0026gt; null - security_groups = [ - \u0026#34;sg-0ce04508e0520a5f7\u0026#34;, ] -\u0026gt; null - source_dest_check = true -\u0026gt; null - subnet_id = \u0026#34;subnet-0dbfc00f69e201fa7\u0026#34; -\u0026gt; null - tags = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tags_all = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - attachment { - attachment_id = \u0026#34;eni-attach-05750a0a2ee7869c5\u0026#34; -\u0026gt; null - device_index = 0 -\u0026gt; null - instance = \u0026#34;i-08a28371557209b0b\u0026#34; -\u0026gt; null } } # aws_s3_bucket.new_bucket will be destroyed - resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;new_bucket\u0026#34; { - arn = \u0026#34;arn:aws:s3:::automate-iac-bucket-123123123\u0026#34; -\u0026gt; null - bucket = \u0026#34;automate-iac-bucket-123123123\u0026#34; -\u0026gt; null - bucket_domain_name = \u0026#34;automate-iac-bucket-123123123.s3.amazonaws.com\u0026#34; -\u0026gt; null - bucket_regional_domain_name = \u0026#34;automate-iac-bucket-123123123.s3.us-east-1.amazonaws.com\u0026#34; -\u0026gt; null - force_destroy = false -\u0026gt; null - hosted_zone_id = \u0026#34;Z3AQBSTGFYJSTF\u0026#34; -\u0026gt; null - id = \u0026#34;automate-iac-bucket-123123123\u0026#34; -\u0026gt; null - object_lock_enabled = false -\u0026gt; null - region = \u0026#34;us-east-1\u0026#34; -\u0026gt; null - request_payer = \u0026#34;BucketOwner\u0026#34; -\u0026gt; null - tags = {} -\u0026gt; null - tags_all = {} -\u0026gt; null - grant { - id = \u0026#34;479f57b44641303e6c9a544836dc9b6e50e73a3e558bcb6a2a08f13a3ec6b547\u0026#34; -\u0026gt; null - permissions = [ - \u0026#34;FULL_CONTROL\u0026#34;, ] -\u0026gt; null - type = \u0026#34;CanonicalUser\u0026#34; -\u0026gt; null } - server_side_encryption_configuration { - rule { - bucket_key_enabled = false -\u0026gt; null - apply_server_side_encryption_by_default { - sse_algorithm = \u0026#34;AES256\u0026#34; -\u0026gt; null } } } - versioning { - enabled = false -\u0026gt; null - mfa_delete = false -\u0026gt; null } } # aws_subnet.automate-iac-subnet will be destroyed - resource \u0026#34;aws_subnet\u0026#34; \u0026#34;automate-iac-subnet\u0026#34; { - arn = \u0026#34;arn:aws:ec2:us-east-1:566027688242:subnet/subnet-0dbfc00f69e201fa7\u0026#34; -\u0026gt; null - assign_ipv6_address_on_creation = false -\u0026gt; null - availability_zone = \u0026#34;us-east-1a\u0026#34; -\u0026gt; null - availability_zone_id = \u0026#34;use1-az1\u0026#34; -\u0026gt; null - cidr_block = \u0026#34;172.16.10.0/24\u0026#34; -\u0026gt; null - enable_dns64 = false -\u0026gt; null - enable_lni_at_device_index = 0 -\u0026gt; null - enable_resource_name_dns_a_record_on_launch = false -\u0026gt; null - enable_resource_name_dns_aaaa_record_on_launch = false -\u0026gt; null - id = \u0026#34;subnet-0dbfc00f69e201fa7\u0026#34; -\u0026gt; null - ipv6_native = false -\u0026gt; null - map_customer_owned_ip_on_launch = false -\u0026gt; null - map_public_ip_on_launch = false -\u0026gt; null - owner_id = \u0026#34;566027688242\u0026#34; -\u0026gt; null - private_dns_hostname_type_on_launch = \u0026#34;ip-name\u0026#34; -\u0026gt; null - tags = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tags_all = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - vpc_id = \u0026#34;vpc-02606838ac1e89cea\u0026#34; -\u0026gt; null } # aws_vpc.automate-iac-vpc will be destroyed - resource \u0026#34;aws_vpc\u0026#34; \u0026#34;automate-iac-vpc\u0026#34; { - arn = \u0026#34;arn:aws:ec2:us-east-1:566027688242:vpc/vpc-02606838ac1e89cea\u0026#34; -\u0026gt; null - assign_generated_ipv6_cidr_block = false -\u0026gt; null - cidr_block = \u0026#34;172.16.0.0/16\u0026#34; -\u0026gt; null - default_network_acl_id = \u0026#34;acl-063165fef63bf9e2c\u0026#34; -\u0026gt; null - default_route_table_id = \u0026#34;rtb-087a43ef011a55a02\u0026#34; -\u0026gt; null - default_security_group_id = \u0026#34;sg-0ce04508e0520a5f7\u0026#34; -\u0026gt; null - dhcp_options_id = \u0026#34;dopt-6cefc816\u0026#34; -\u0026gt; null - enable_dns_hostnames = false -\u0026gt; null - enable_dns_support = true -\u0026gt; null - enable_network_address_usage_metrics = false -\u0026gt; null - id = \u0026#34;vpc-02606838ac1e89cea\u0026#34; -\u0026gt; null - instance_tenancy = \u0026#34;default\u0026#34; -\u0026gt; null - ipv6_netmask_length = 0 -\u0026gt; null - main_route_table_id = \u0026#34;rtb-087a43ef011a55a02\u0026#34; -\u0026gt; null - owner_id = \u0026#34;566027688242\u0026#34; -\u0026gt; null - tags = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null - tags_all = { - \u0026#34;Name\u0026#34; = \u0026#34;automate-iac\u0026#34; } -\u0026gt; null } Plan: 0 to add, 0 to change, 6 to destroy. aws_key_pair.new_keypair: Destroying... [id=automate-iac-kp] aws_s3_bucket.new_bucket: Destroying... [id=automate-iac-bucket-123123123] aws_instance.new_instance: Destroying... [id=i-08a28371557209b0b] aws_key_pair.new_keypair: Destruction complete after 0s aws_s3_bucket.new_bucket: Destruction complete after 0s aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 10s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 20s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 30s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 40s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 50s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 1m0s elapsed] aws_instance.new_instance: Still destroying... [id=i-08a28371557209b0b, 1m10s elapsed] aws_instance.new_instance: Destruction complete after 1m10s aws_network_interface.automate-iac-aws_network_interface: Destroying... [id=eni-0673ed65d965c194e] aws_network_interface.automate-iac-aws_network_interface: Destruction complete after 1s aws_subnet.automate-iac-subnet: Destroying... [id=subnet-0dbfc00f69e201fa7] aws_subnet.automate-iac-subnet: Destruction complete after 0s aws_vpc.automate-iac-vpc: Destroying... [id=vpc-02606838ac1e89cea] aws_vpc.automate-iac-vpc: Destruction complete after 0s Destroy complete! Resources: 6 destroyed. ","permalink":"http://www.nvo.one/posts/004-automate-iac/","summary":"1. Source Code https://github.com/nhatvo1502/Automate-IaC/tree/main 2. What the code does 2.1. create-resource.yml configure aws credential verify aws credential verify aws s3 permission create s3 bucket for terraform backend copy file from GH to runner verify terraform file terraform init -\u0026gt; apply 2.2 destroy-resource.yml configure aws credential copy file from GH to runner verify terraform file terraform init -\u0026gt; destroy empty s3 backend bucket delete-bucket 2.3 main.tf configure s3 as backend create an s3 bucket create a keypair using a public key from GitHub Secret AMI lookup create VPC create a subnet create a network interface create EC2 instance 3.","title":"Using Terraform to build AWS network infrastructure and deploy resources"},{"content":"1. Verify sender\u0026rsquo;s email address The sender\u0026rsquo;s origin contains 2 parts: The display name and email@domain.com.\nNhat Vo \u0026lt;nhat.vo@awakenservices.net\u0026gt; Display name: Nhat Vo Email address: nhat.vo@awakenservices.net The display name can be forged while email address cannot.\nThis is an example of phishing emails: Nhat Vo \u0026lt;nhat.vo@123456.com\u0026gt; Display name: Nhat Vo Email address: nhat.vo@12345.com 2. Don\u0026rsquo;t Trust Unsolicited Emails Be cautious of unexpected emails, especially those requesting personal information or urging you to click on links. Verify the legitimacy of the email by contacting the sender through a trusted method.\n3. Look for Spelling and Grammar Errors Phishing emails often contain spelling and grammar mistakes. Legitimate organizations usually have professional communication.\n4. Avoid Clicking on Suspicious Links Hover over links to preview the actual URL before clicking. If the link address looks suspicious or doesn\u0026rsquo;t match the expected destination, avoid clicking.\n5. Verify Requests for Sensitive Information Legitimate organizations will not ask for sensitive information like passwords or credit card details via email. If in doubt, contact the organization directly using official contact information.\n","permalink":"http://www.nvo.one/posts/003-phishing-email/","summary":"1. Verify sender\u0026rsquo;s email address The sender\u0026rsquo;s origin contains 2 parts: The display name and email@domain.com.\nNhat Vo \u0026lt;nhat.vo@awakenservices.net\u0026gt; Display name: Nhat Vo Email address: nhat.vo@awakenservices.net The display name can be forged while email address cannot.\nThis is an example of phishing emails: Nhat Vo \u0026lt;nhat.vo@123456.com\u0026gt; Display name: Nhat Vo Email address: nhat.vo@12345.com 2. Don\u0026rsquo;t Trust Unsolicited Emails Be cautious of unexpected emails, especially those requesting personal information or urging you to click on links.","title":"Avoid Phishing and Malicious Emails in 2024"},{"content":"I. Introduction This project is inspired by one of my dear friend. Instead of using the AWS Console to generate a credential report, we would set up a runner on GitHub Actions to automate this task. It\u0026rsquo;s a very cool experiment, and I hope that by the end, I can apply and scale this concept into a part of a bigger project down the road.\nII. Our Game-plan We will leverage Github Action to execute a set of commands to generate AWS Credential Report, download it, decode, pipe the content into csv file and finally copy to a existing S3 bucket.\nTools that we need for this project:\nAWS CLI https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html GitHub CLI https://cli.github.com/ III. Create an AWS CLI user + proper permission Steps:\nCreate custom IAM policy on AWS Console Create CLI user Attach the custom IAM Policy to CLI user Create a CLI Access Key Confiure AWS Credential on local terminal What permission do you need?\n- Generate Credential Report iam:GenerateCredentialReport\n- Download Credential Report iam:GetCredentialReport\n- Write to S3 S3:PutObject\n- List S3 bucket S3:GetPbject\n1. Create custom IAM policy on AWS Console:\nAWS Console \u0026gt; IAM \u0026gt; Under Access management \u0026gt; Policies Copy and paste the following JSON policy to the policy editor. You can also create a seperate policy for S3:PutObject where it target one of your bucket.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:GenerateCredentialReport\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;iam:GetCredentialReport\u0026#34;, \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } 2. Create CLI user Create a CLI user via AWS Console \u0026gt; IAM \u0026gt; Under Access management \u0026gt; Users \u0026gt; Create user 3. Attach the custom IAM Policy to CLI user Select CLI User \u0026gt; Under Permissions \u0026gt; Permissions policies \u0026gt; Add permission \u0026gt; Select our custom policies 4. Create a CLI Access Key Select CLI User in AWS Console \u0026gt; Security credentials Under Access keys \u0026gt; Create access key \u0026gt; Select Command Line Interface (CLI) \u0026gt; tick the box Confirmation \u0026gt; Next \u0026gt; Create access key\nNote down the Access key and Secret access key, you will need these later 5. Confiure AWS Credential on local terminal\nGo to local terminal or Ctrl + Shift +` in vscode to open terminal (my default terminal is PowerShell) \u0026gt; enter this command\naws configure Copy and paste your CLI user access key\nCopy and paste your CLI user secret access key\nEnter default region (mine is us-west-1)\nEnter default format (mine is json)\nVerify your input by entering this command\naws configure list IV. GitHub Steps:\nCreate Github account from their website if you don\u0026rsquo;t have one ready Create a repository Create secret environment Create AWS access key and secret access key secrets 1. Create Github account from their website if you don\u0026rsquo;t have one ready\nGo to their website and sign-up\nhttps://github.com/ 2. Create a repository\nYou can create a new repo from Github web console or using CLI: Login\ngh auth login Create new repo\ngh repo create If you create repo from web, make sure to clone it to your local\ngh repo clone 3. Create Github Action AWS Secrets\nGo to github.com \u0026gt; Your project repository \u0026gt; Settings \u0026gt; under Security \u0026gt; Secrets and variables \u0026gt; Actions\nNew Environment \u0026gt; Create environment name Dev \u0026gt; Click on Dev\nAdd secret \u0026gt; Name it AWS_ACCESS_KEY_ID \u0026gt; Copy and paste your CLI Access Key from the note\nAdd secret \u0026gt; Name it AWS_SECRET_ACCESS_KEY \u0026gt; Copy and paste your CLI Secret Access Key from the note\nV. VSCODE extension** I use VSCode along with these extensions GitHub Action will support syntax for yml file.\nVI. Github Action Steps:\nCreate .github/workflows Create yaml files Configure yaml files Code explains Commit to Github Test 1. Create .github/workflows\nGo to the repo folder and create this folder structure\nmkdir .github cd .github mkdir workflows Create action.yml\nIt should look like this\n3. Configure yaml files\nOpen action.yml using vscode\nCopy and paste this code block\nname: Automate Credential Report on: # trigger manually workflow_dispatch: jobs: generate-export-credential-report: runs-on: ubuntu-latest environment: Dev steps: - name: Verify aws run: aws --version - name: Configure AWS Credentials env: AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION: \u0026#39;us-east-1\u0026#39; run: | mkdir -p ~/.aws echo \u0026#34;[default]\u0026#34; \u0026gt; ~/.aws/credentials echo \u0026#34;aws_access_key_id=${AWS_ACCESS_KEY_ID}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials echo \u0026#34;aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials echo \u0026#34;region=${AWS_DEFAULT_REGION}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials - name: Verify AWS Credential run: aws configure list - name: Verify s3 permission run: aws s3 ls - name: Generate Credential Report run: aws iam generate-credential-report - name: Wait for 5 second run: sleep 5 - name: Retrieve report run: report_content=$(aws iam get-credential-report --query \u0026#39;Content\u0026#39; --output text) - name: Decode report run: report_text=$(echo \u0026#34;$report_content\u0026#34; | base64 -d) - name: Save report to csv file run: echo \u0026#34;$report_text\u0026#34; \u0026gt; credential-report.csv - name: Copy the report to s3 run: aws s3 cp ./credential-report.csv s3://keypair-1234 4. Code explains\nWe will start with giving this action a name name: Automate Credential Report The on code block will determine the trigger condition, in this case, work_dispatch mean manual trigger. Read more on on: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions on: workflow_dispatch The jobs structure should be jobs: build: runs-on: *The machine that you want the jobs to be ran on, we call it runner* environment: *Environment to store our secret on git hub* steps: - name: *Name of each step run: *bash command* Using this understanding, it will translate our code above into jobs: generate-export-credential-report: *our build name* runs-on: ubuntu-latest *running on abuntu with latest update* environment: Dev *Our Github secret environment Dev* All ubuntu-latest on github action pre-installed with AWS CLI, we just want to verify if this is true by verify aws version - name: Verify aws run: aws --version Login AWS CLI user to this runner using AWS Access Key and Secret Access Key that we have saved into our note above. Instead of writing our secret key to the yml, we will be passing it from our Github secret environment which I will be showing in a bit. - name: Configure AWS Credentials env: AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION: \u0026#39;us-east-1\u0026#39; run: | mkdir -p ~/.aws echo \u0026#34;[default]\u0026#34; \u0026gt; ~/.aws/credentials echo \u0026#34;aws_access_key_id=${AWS_ACCESS_KEY_ID}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials echo \u0026#34;aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials echo \u0026#34;region=${AWS_DEFAULT_REGION}\u0026#34; \u0026gt;\u0026gt; ~/.aws/credentials Verify our credential - name: Verify AWS Credential run: aws configure list This step is optional since I only include S3:PutObject in the policy. To be able to verify if we have permision to s3, we also need S3:GetObject. - name: Verify s3 permission run: aws s3 ls Generate AWS Credential Report - name: Generate Credential Report run: aws iam generate-credential-report Sleep for 5 to make sure the AWS finish generate the report before we can download, if we try to download right after generate, there is a chance the report has not yet been created therefore the script will timeout - name: Wait for 5 second run: sleep 5 Download the report into a variable report_content - name: Retrieve report run: report_content=$(aws iam get-credential-report --query \u0026#39;Content\u0026#39; --output text) Since the content we just downloaded is encrypted Base64, we need to decode it - name: Decode report run: report_text=$(echo \u0026#34;$report_content\u0026#34; | base64 -d) Save it as csv file - name: Save report to csv file run: echo \u0026#34;$report_text\u0026#34; \u0026gt; credential-report.csv Then copy it to S3 - name: Copy the report to s3 run: aws s3 cp ./credential-report.csv s3://keypair-1234 5. Commit to Github\nEnter this command to commit the code to github\ngit add *.* git commit -m \u0026#39;my first commit\u0026#39; git push Go to github.com \u0026gt; your repo and check if your code is there\nGo to Actions tab \u0026gt; if the folder structure .github/workflows/action.yml was done right, you should see this Drop down Run workflow button \u0026gt; Run workflow \u0026gt; Click onto the workflow and see all the steps are executing in real time If all the steps are succesfully executed \u0026gt; go to AWS Console \u0026gt; S3 \u0026gt; your bucket \u0026gt; you should see your report Download it and open with excel to see if the decoding works\n","permalink":"http://www.nvo.one/posts/002-aws-credential-report/","summary":"I. Introduction This project is inspired by one of my dear friend. Instead of using the AWS Console to generate a credential report, we would set up a runner on GitHub Actions to automate this task. It\u0026rsquo;s a very cool experiment, and I hope that by the end, I can apply and scale this concept into a part of a bigger project down the road.\nII. Our Game-plan We will leverage Github Action to execute a set of commands to generate AWS Credential Report, download it, decode, pipe the content into csv file and finally copy to a existing S3 bucket.","title":"Using Github Action to generate AWS Credential Report"},{"content":"Hi, my name is Nhat Vo. I\u0026rsquo;m an IT Officer and off-seasoned Software Dev with a keen interest in cloud technology (especially AWS). This blog will be my jounal where I would write about my personal cloud projects and anything IT related.\nWhen I\u0026rsquo;m away from the keyboard, I like to tinker with my car and travel with my favorite people.\nThank you for visiting\nNV\n","permalink":"http://www.nvo.one/posts/about-me/","summary":"Hi, my name is Nhat Vo. I\u0026rsquo;m an IT Officer and off-seasoned Software Dev with a keen interest in cloud technology (especially AWS). This blog will be my jounal where I would write about my personal cloud projects and anything IT related.\nWhen I\u0026rsquo;m away from the keyboard, I like to tinker with my car and travel with my favorite people.\nThank you for visiting\nNV","title":"About Me"}]