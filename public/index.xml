<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nathaniel</title>
    <link>http://www.nvo.one/</link>
    <description>Recent content on nathaniel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2025 13:35:59 -0800</lastBuildDate>
    <atom:link href="http://www.nvo.one/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rekognition</title>
      <link>http://www.nvo.one/posts/rekcognition/</link>
      <pubDate>Thu, 27 Feb 2025 13:35:59 -0800</pubDate>
      <guid>http://www.nvo.one/posts/rekcognition/</guid>
      <description>Intro: Recently, I explored a simple yet powerful way to achieve image processing using AWS Lambda and AWS Rekognition. With Machine Learning on the rise, I think it would be a cool project for me to get my hands on this topic. In this post, I’ll walk through a scalable and cost-effective approach: using AWS Lambda to process images stored in an S3 bucket, analyze their content with Rekognition to identify objects, faces, or text, and then store the extracted metadata in another S3 bucket for further use.</description>
    </item>
    <item>
      <title>My First Terraform</title>
      <link>http://www.nvo.one/posts/my-first-terraform/</link>
      <pubDate>Thu, 13 Feb 2025 17:04:35 -0800</pubDate>
      <guid>http://www.nvo.one/posts/my-first-terraform/</guid>
      <description>Check out my project on GitHub
The Goal: The idea is to use Infrastructure as Code (IaC) to quickly spin up a simple yet secure virtual network on AWS. Terraform CLI is my tool of choice for managing it all, so I can automate the setup and ensure everything stays organized and reproducible.
What’s Inside the Infrastructure: A VPC in the us-west-1 region with a CIDR block of 10.0.0.0/16—this is the foundation of the network.</description>
    </item>
    <item>
      <title>Fetching Shopify API using AWS Lambda and DynamoDB</title>
      <link>http://www.nvo.one/posts/shopify-daily-report/</link>
      <pubDate>Mon, 04 Nov 2024 14:45:48 -0800</pubDate>
      <guid>http://www.nvo.one/posts/shopify-daily-report/</guid>
      <description>Hey there! Welcome to my tech blog. I’m excited to share a little project: automating Shopify orders data into a database warehouse and setting up the connection for analysis. I wanted a simple way to fetch data and get real-time insights without all the manual effort. So, I set up AWS Event Scheduler to trigger data retrieval, used AWS Lambda for serverless processing, and chose DynamoDB for storage. To connect DynamoDB to Microsoft Power BI, I used CDATA Universal Software to create an ODBC driver.</description>
    </item>
    <item>
      <title>Send SMS with Twilio using AWS Lambda and API Gateway</title>
      <link>http://www.nvo.one/posts/twilio-microservice/</link>
      <pubDate>Mon, 28 Oct 2024 16:19:06 -0700</pubDate>
      <guid>http://www.nvo.one/posts/twilio-microservice/</guid>
      <description>Welcome to my tech blog! Today, I’m excited to take you on my cloud journey with a project which I was inspired from real-world challenge: integrating SMS notifications into a software that had numerous restrictions. I needed a solution to notify users whenever the database was updated. Instead of wrestling with the software’s limitations, I decided to create a microservice that could handle SMS notifications independently. This way, the software team can invoke an API to send SMS messages without worrying about the underlying code and integration complexities.</description>
    </item>
    <item>
      <title>About Me</title>
      <link>http://www.nvo.one/posts/about-me/</link>
      <pubDate>Mon, 08 Jan 2024 16:40:52 -0800</pubDate>
      <guid>http://www.nvo.one/posts/about-me/</guid>
      <description>&amp;ldquo;Humility is not thinking less of yourself, it&amp;rsquo;s thinking of yourself less.&amp;rdquo;
Rick Warren </description>
    </item>
  </channel>
</rss>
